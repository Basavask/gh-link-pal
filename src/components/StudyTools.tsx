import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  BookOpen, 
  Brain, 
  Target, 
  RotateCcw,
  CheckCircle,
  ArrowRight,
  Sparkles,
  Clock,
  Trophy,
  MessageCircle
} from "lucide-react";

interface StudyToolsProps {
  document?: {
    name: string;
    notes: string;
    flashcards: Array<{ id: number; front: string; back: string; }>;
    quizzes: Array<{ id: number; question: string; options: string[]; correct: number; }>;
  };
}

export const StudyTools = ({ document }: StudyToolsProps) => {
  const [currentFlashcard, setCurrentFlashcard] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [currentQuiz, setCurrentQuiz] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [quizScore, setQuizScore] = useState(0);
  const [showQuizResult, setShowQuizResult] = useState(false);

  // Mock data if no document provided
  const mockDocument = {
    name: "Introduction to Machine Learning",
    notes: `# Machine Learning Overview

## Key Concepts
- **Supervised Learning**: Learning with labeled examples
- **Unsupervised Learning**: Finding patterns in unlabeled data
- **Reinforcement Learning**: Learning through trial and error

## Algorithms
1. Linear Regression
2. Decision Trees
3. Neural Networks
4. Support Vector Machines

## Applications
- Image Recognition
- Natural Language Processing
- Recommendation Systems
- Autonomous Vehicles`,
    flashcards: [
      { id: 1, front: "What is supervised learning?", back: "Learning with labeled training examples to make predictions on new data" },
      { id: 2, front: "Name three ML algorithms", back: "Linear Regression, Decision Trees, Neural Networks" },
      { id: 3, front: "What is reinforcement learning?", back: "Learning optimal actions through trial and error with rewards and penalties" },
      { id: 4, front: "Give an example of ML application", back: "Image recognition, NLP, recommendation systems, autonomous vehicles" },
    ],
    quizzes: [
      { id: 1, question: "Which type of learning uses labeled training data?", options: ["Supervised", "Unsupervised", "Reinforcement", "Semi-supervised"], correct: 0 },
      { id: 2, question: "What is a common application of machine learning?", options: ["Text editing", "Image recognition", "File compression", "Network routing"], correct: 1 },
      { id: 3, question: "Which algorithm is typically used for regression problems?", options: ["K-means", "Linear Regression", "DBSCAN", "Apriori"], correct: 1 },
    ]
  };

  const data = document || mockDocument;

  const handleFlashcardNext = () => {
    setShowAnswer(false);
    setCurrentFlashcard((prev) => (prev + 1) % data.flashcards.length);
  };

  const handleQuizAnswer = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
    const isCorrect = answerIndex === data.quizzes[currentQuiz].correct;
    if (isCorrect) {
      setQuizScore(prev => prev + 1);
    }
    setShowQuizResult(true);
  };

  const handleQuizNext = () => {
    setSelectedAnswer(null);
    setShowQuizResult(false);
    if (currentQuiz < data.quizzes.length - 1) {
      setCurrentQuiz(prev => prev + 1);
    }
  };

  return (
    <div className="w-full max-w-6xl mx-auto space-y-6">
      {/* Document Header */}
      <Card className="p-6 bg-gradient-card border">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <h2 className="text-2xl font-bold">{data.name}</h2>
            <p className="text-muted-foreground">Study materials generated by AI</p>
          </div>
          <div className="flex items-center space-x-2">
            <Badge variant="secondary" className="bg-primary/10 text-primary">
              <Sparkles className="h-3 w-3 mr-1" />
              AI Generated
            </Badge>
            <Button variant="outline" size="sm">
              <MessageCircle className="h-4 w-4 mr-2" />
              Ask AI Tutor
            </Button>
          </div>
        </div>
      </Card>

      {/* Study Tools Tabs */}
      <Tabs defaultValue="notes" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="notes" className="flex items-center space-x-2">
            <BookOpen className="h-4 w-4" />
            <span>Notes</span>
          </TabsTrigger>
          <TabsTrigger value="flashcards" className="flex items-center space-x-2">
            <Brain className="h-4 w-4" />
            <span>Flashcards</span>
          </TabsTrigger>
          <TabsTrigger value="quiz" className="flex items-center space-x-2">
            <Target className="h-4 w-4" />
            <span>Quiz</span>
          </TabsTrigger>
          <TabsTrigger value="progress" className="flex items-center space-x-2">
            <Trophy className="h-4 w-4" />
            <span>Progress</span>
          </TabsTrigger>
        </TabsList>

        {/* Notes Tab */}
        <TabsContent value="notes" className="space-y-6">
          <Card className="p-8">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-semibold">AI-Generated Notes</h3>
              <div className="flex items-center space-x-2">
                <Clock className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm text-muted-foreground">Generated 2 mins ago</span>
              </div>
            </div>
            <div className="prose prose-slate max-w-none">
              <pre className="whitespace-pre-wrap font-sans text-foreground leading-relaxed">
                {data.notes}
              </pre>
            </div>
          </Card>
        </TabsContent>

        {/* Flashcards Tab */}
        <TabsContent value="flashcards" className="space-y-6">
          <div className="text-center">
            <div className="flex items-center justify-center space-x-4 mb-6">
              <span className="text-sm text-muted-foreground">
                Card {currentFlashcard + 1} of {data.flashcards.length}
              </span>
              <Progress value={((currentFlashcard + 1) / data.flashcards.length) * 100} className="w-32" />
            </div>

            <Card className="max-w-md mx-auto p-8 min-h-[300px] flex flex-col justify-center bg-gradient-card border-2 hover:shadow-glow transition-all duration-300">
              <div className="space-y-6">
                <div className="text-center">
                  <h3 className="text-lg font-semibold mb-4">
                    {showAnswer ? 'Answer' : 'Question'}
                  </h3>
                  <p className="text-xl leading-relaxed">
                    {showAnswer 
                      ? data.flashcards[currentFlashcard].back 
                      : data.flashcards[currentFlashcard].front
                    }
                  </p>
                </div>

                <div className="flex justify-center space-x-4">
                  {!showAnswer ? (
                    <Button 
                      onClick={() => setShowAnswer(true)}
                      className="bg-gradient-primary hover:opacity-90"
                    >
                      Show Answer
                    </Button>
                  ) : (
                    <div className="space-x-4">
                      <Button variant="outline" onClick={handleFlashcardNext}>
                        <RotateCcw className="h-4 w-4 mr-2" />
                        Try Again
                      </Button>
                      <Button onClick={handleFlashcardNext} className="bg-gradient-primary hover:opacity-90">
                        Next Card
                        <ArrowRight className="h-4 w-4 ml-2" />
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            </Card>
          </div>
        </TabsContent>

        {/* Quiz Tab */}
        <TabsContent value="quiz" className="space-y-6">
          <div className="max-w-2xl mx-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-semibold">Practice Quiz</h3>
              <div className="flex items-center space-x-4">
                <span className="text-sm text-muted-foreground">
                  Question {currentQuiz + 1} of {data.quizzes.length}
                </span>
                <Badge variant="outline">Score: {quizScore}/{currentQuiz + (showQuizResult ? 1 : 0)}</Badge>
              </div>
            </div>

            <Card className="p-8">
              <div className="space-y-6">
                <h4 className="text-lg font-medium leading-relaxed">
                  {data.quizzes[currentQuiz].question}
                </h4>

                <div className="space-y-3">
                  {data.quizzes[currentQuiz].options.map((option, index) => (
                    <Button
                      key={index}
                      variant={
                        showQuizResult
                          ? index === data.quizzes[currentQuiz].correct
                            ? "default"
                            : index === selectedAnswer
                            ? "destructive"
                            : "outline"
                          : selectedAnswer === index
                          ? "secondary"
                          : "outline"
                      }
                      className="w-full justify-start h-auto p-4 text-left"
                      onClick={() => !showQuizResult && handleQuizAnswer(index)}
                      disabled={showQuizResult}
                    >
                      <span className="mr-3 font-medium">{String.fromCharCode(65 + index)}.</span>
                      <span>{option}</span>
                      {showQuizResult && index === data.quizzes[currentQuiz].correct && (
                        <CheckCircle className="h-5 w-5 ml-auto text-accent" />
                      )}
                    </Button>
                  ))}
                </div>

                {showQuizResult && (
                  <div className="pt-4 border-t border-border">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        {selectedAnswer === data.quizzes[currentQuiz].correct ? (
                          <>
                            <CheckCircle className="h-5 w-5 text-accent" />
                            <span className="text-accent font-medium">Correct!</span>
                          </>
                        ) : (
                          <>
                            <div className="h-5 w-5 rounded-full bg-destructive flex items-center justify-center">
                              <span className="text-destructive-foreground text-xs">✗</span>
                            </div>
                            <span className="text-destructive font-medium">Incorrect</span>
                          </>
                        )}
                      </div>
                      
                      {currentQuiz < data.quizzes.length - 1 ? (
                        <Button onClick={handleQuizNext} className="bg-gradient-primary hover:opacity-90">
                          Next Question
                          <ArrowRight className="h-4 w-4 ml-2" />
                        </Button>
                      ) : (
                        <Button variant="outline">
                          <Trophy className="h-4 w-4 mr-2" />
                          View Results
                        </Button>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </Card>
          </div>
        </TabsContent>

        {/* Progress Tab */}
        <TabsContent value="progress" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card className="p-6 text-center">
              <div className="space-y-2">
                <div className="text-3xl font-bold text-primary">85%</div>
                <p className="text-sm text-muted-foreground">Overall Progress</p>
              </div>
            </Card>
            
            <Card className="p-6 text-center">
              <div className="space-y-2">
                <div className="text-3xl font-bold text-accent">12</div>
                <p className="text-sm text-muted-foreground">Cards Mastered</p>
              </div>
            </Card>
            
            <Card className="p-6 text-center">
              <div className="space-y-2">
                <div className="text-3xl font-bold text-secondary">3</div>
                <p className="text-sm text-muted-foreground">Study Streak</p>
              </div>
            </Card>
          </div>

          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4">Study Recommendations</h3>
            <div className="space-y-3">
              <div className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg">
                <Brain className="h-5 w-5 text-primary" />
                <span className="text-sm">Review flashcards on supervised learning</span>
              </div>
              <div className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg">
                <Target className="h-5 w-5 text-accent" />
                <span className="text-sm">Take another quiz to improve accuracy</span>
              </div>
              <div className="flex items-center space-x-3 p-3 bg-muted/50 rounded-lg">
                <BookOpen className="h-5 w-5 text-secondary" />
                <span className="text-sm">Focus on neural networks concepts</span>
              </div>
            </div>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};